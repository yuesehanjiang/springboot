package com.yun.utils;

import java.io.File;
import java.util.Arrays;
import java.util.Map;

import org.json.JSONObject;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.TypeReference;
import com.baidu.aip.contentcensor.AipContentCensor;
import com.baidu.aip.contentcensor.EImgType;


/**
 * 
*项目名称：企智云_终端机
*创建作者：瞿黑子
*创建日期：2018年11月6日
*详细描述：图片和内容审核工具
 */
public class ImageCheckUtils {

    // 设置APPID/AK/SK
    private static final String APP_ID = "14655874";
    private static final String API_KEY = "wVZiYII89WmO5EaHXbj20YPX";
    private static final String SECRET_KEY = "Ax2s9Hvpd98Ij5UPKeRiShxlQHxNi4So";

    // 初始化一个AipImageCensor
    private static AipContentCensor client = null;

    // 获取
    private static synchronized AipContentCensor getClient() {
        if (client == null) {
            client = new AipContentCensor(APP_ID, API_KEY, SECRET_KEY);
        }
        client.setSocketTimeoutInMillis(60000);
        return client;
    }

    //返回结果的校验
    private static int checkResponse(JSONObject response) {
        Map<String, String> params = com.alibaba.fastjson.JSONObject.parseObject(response.toString(),
                new TypeReference<Map<String, String>>() {
                });
        System.out.println(response);
        // 审核结果，成功才返回，失败不返回。可取值1.合规,2.疑似，3.不合规
        String conclusionType = params.get("conclusionType");  
        // 审核失败
        if (conclusionType == null) {
            return 1;
        }
        // 不合规
        if (!conclusionType.equals("1")) {
            return 2;
        }
        // 合格
        return 0;
    }

    // 本地图片
    public static int checkLocalImage(String localImagePath) {
        JSONObject response = getClient().imageCensorUserDefined(localImagePath, EImgType.FILE, null);
        return checkResponse(response);
    }

    // 核查url图片
    public static int checkUrlImage(String imageUrl) {
        JSONObject response = getClient().imageCensorUserDefined(imageUrl, EImgType.URL, null);
        return checkResponse(response);
    }
    
    //核查二进制文件数组
    public static int checkFileByteArrayImage(byte[] file){
        JSONObject response =  getClient().imageCensorUserDefined(file, null);
        return checkResponse(response);
    }

    // 核查GIF图片
    // 访问限制：图片格式：gif；每帧编码后大小<4M; 帧数：不超过50;GIF图片整体大小：base64编码后不超过20M
    public static JSONObject antiPornGif(String localImagePath) {
        // 参数为本地图片路径
        JSONObject response = getClient().antiPornGif(localImagePath);
        return response;
    }

    // 头像审核: res_code 业务校验结果 0：校验通过，1：校验不通过
    public static int faceAudit(String faceImage) {
        // 参数为本地图片路径
        JSONObject response = getClient().faceAudit(Arrays.asList(faceImage), EImgType.FILE, null);

        Map<String, Object> params = com.alibaba.fastjson.JSONObject.parseObject(response.toString(),
                new TypeReference<Map<String, Object>>() {
                });
        // 获取结果参数,为JSONArray
        JSONArray result = (JSONArray) params.get("result");
        Map<String, Object> resultParams = com.alibaba.fastjson.JSONObject.parseObject(result.get(0).toString(),
                new TypeReference<Map<String, Object>>() {
                });
        int checkResult = (int) resultParams.get("res_code");
        return checkResult;
    }

    // 组合审核--本地图片
    public static JSONObject imageCensorCombForLocalImage(String localImagePath) {
        JSONObject response = getClient().imageCensorComb(localImagePath, EImgType.FILE,
                Arrays.asList("antiporn", "terror", "disgust"), null);
        return response;
    }

    // 组合审核--图片路径
    public static JSONObject imageCensorCombForUrlImage(String imageUrl) {
        JSONObject response = getClient().imageCensorComb(imageUrl, EImgType.URL,
                Arrays.asList("antiporn", "terror", "disgust"), null);
        return response;
    }

    // 文本审核:请求中是否包含违禁，0表示非违禁，1表示违禁，2表示建议人工复审
    public static int checkContent(String content) {
        JSONObject response = getClient().antiSpam(content, null);
        Map<String, Object> params = com.alibaba.fastjson.JSONObject.parseObject(response.toString(),
                new TypeReference<Map<String, Object>>() {
                });
        // 获取结果参数,为JSONArray
        com.alibaba.fastjson.JSONObject result = (com.alibaba.fastjson.JSONObject) params.get("result");
        Map<String, Object> resultParams = com.alibaba.fastjson.JSONObject.parseObject(result.toString(),
                new TypeReference<Map<String, Object>>() {
                });
        int spam = (int) resultParams.get("spam");
        return spam;
    }

    
    public static void main(String[] args) throws Exception {
        String path = "test.jpg";
//        System.out.println(
//                checkContent("给你一张床 一卷草席 给你一个洞房 给你十根手指 一杆长枪 给你一个流氓 给你九千九百亿颗精子 给你九万九千次高潮给你终日浪荡 给你玩命疯狂熄盏灯 你情我愿造个人"));
          checkLocalImage(path);
          
          File file = new File(path); 
//          System.out.println(ImageToByteArrayUtil.getFileToByte(file).length);
          System.out.println(checkFileByteArrayImage(ImageToByteArrayUtil.fileToByteArray(file)));
    }

}
